def nucleotide_count_TM(sequence):
    A_count = sequence.count('A')
    C_count = sequence.count('C')
    G_count = sequence.count('G')
    T_count = sequence.count('T')
    TM = 4*(C_count + G_count) + 2*(A_count + T_count)
    TM = str(TM)
    A_count = str(A_count)
    C_count = str(C_count)
    G_count = str(G_count)
    T_count = str(T_count)
    print 'Melting Temp = ' + TM
    print 'A = ' + A_count
    print 'C = ' + C_count
    print 'G = ' + G_count
    print 'T = ' + T_count
    print 'Sequence ends in G = ' + str(sequence[-1] == 'G')
    print 'Sequence ends in C = ' + str(sequence[-1] == 'C')
    
   
    
nucleotide_count_TM("GCCCGATAGTTCGGTACGAGG")

primer = "GCCCGATAGTTCGGTACGAGG"
print(primer)
list_primer = list(primer)
print(list_primer)
    

def DNA_to_RNA(sequence):
    RNA = sequence.replace('T', 'U')
    print RNA
    
DNA_to_RNA('TCGTCCTGTACCTGTCCGAATAGAGTATCGTCGCATCGATTTGAACCCTACTATGGCATTGATACCAATGCTCTGAGGGTGTTAAAGTTCCGGAAACACAAGAATACGAGTAATGTACGCTGGGCTAAACTGCTAGCACCTCGGGTTGTGTCACTATAGCAAGGGATGATTAACGTTACACGCACCGGCTACATGGGCAGTAGGCGCGGTGGCGTCTTGTACGATCGTTGGCCCTTGTACTTGTTGAAAGATTCGACTTCGATGGAGTCACCCAAGGTTAGGTATCCATGAGTATTTCATCCGAATGCATCATCACCCTTCGAGTTCGTAATACGAAATAACGATGGGATACTTCATTTCGCAAGAGCGTAATTGTTAGGACTGAGGTGCGTGGCAACGGGTACTGCGTGAGCACCGCAACCGACTTGCGACATTCTAACGCCTGGTGTCCCCGCACTCGGTCATTGCGGTTTTGGTTAACGCAGAATGGCTTACTGAGACCGGTCTGTAATGGTCCGTACTGCGGGGTGTCCTACCGCTGGCTCAAACTCATCAAATGACCGGTGTGGCGACCTCCTTAGTTGTGATTAATAAAACTCGTGATGTCCAAAGGTCGCAGCGACTCCCTGATACGCCTCATTCAGTCAGGTAATGCAGACTACCATTCATGTGTGTGAGCGACCGGTGGTTAGTTTTGTCAATACACCCGGAGTTCGATGCACCGGAGCCAGACGAGCACTATGTATCCCGTCCACCGGCCCCTGGCCCTTCCTACTACTGTAAATAAACTGGTTAGCTTCCGAAATGCCGGCTAGTGGAACAATCTGTTTCAGAAATGGTCGCTACACACAAACCTGACTTAGTCGCTATGAATGACGTGAATACAAGCCCTTACTAGGAATTGTAGGTCGGTACATAGACTACGGTGCAGTGGAGCTAGTCGCTAAATT')

def complement(sequence): 
    """Return the complementary sequence string.""" 
    basecomplement = {'A': 'T', 'C': 'G', 'G': 'C', 'T': 'A'} 
    letters = list(sequence) 
    letters = [basecomplement[base] for base in letters] 
    return ''.join(letters)


def reverse(sequence):
    reverse = sequence[::-1]
    return reverse
    
def reverse_complement(sequence):
    sequence = reverse(sequence)
    sequence = complement(sequence)
    print sequence
    
    
reverse_complement("GCCCGATAGTTCGGTACGAGGTAGTTTAGTGAACCCGGGGATCTAAGTGTTGGTACTCGAGCGAGGAATAATAAGCCCCTCGCCCAACATTTTGGGTTTTCTTCCGTTTTCAACCCGATTAAGTAGCTCTACTGGTCGGAAATTCGAAAGATGAGCAATTTTCCCATCGTTTAGGAGGTACGCCGCTGTAGATCCTCAGTTACCTGCACATCACGTATGAAAGGCTATATACGACCATACAACGCAACGCCGATGGAGCGTCTTCCTTACCAAGAGGCCTTCGGCTGATGGACACTTGCAAAGTGATGGCCTCTCCGCTCCCGACCATTGCGCAGAGTGATAACAGTTGTGGGTTCCGCGGATGTTGGTTGTCATAGGGGAATGTTAAATCAACAATTAAAGCCCTCAAGAGACACCTCAACTTATGTCATCACATGCATTATTACGAATCAGGTGGTGGCTGAAAGACCAAATATCCTGCCCGTCTTCGTTCGCATTGGATACAGGGCTGCACGGAGCGCATGATGCGAGCGCCCGAAATATGAGGGGACGGTTGTTCATAAACGCGTAAGTTCGTATCTAGCCCTATGTCTCCACCTATCTAAAGCACGGTCTGGGTTACCGCCGTCGGTCTAGCCCCTCAGCAGGGGGAGATTTGTGTATGGCAGTCATAGGGTCTCTTGAGAAAGGAGTTTATGCAGGAAGAAATCGTTTTGGACCCGTCCTAGCATGCAAATGCGGCGTGGGGCCCCGAGTAACACGCATCGAGAAGGTAGTCGACAAAAGGCAGTGATATTGCAAGAAGAGCGCAAGCGCAGGCAGTGCAAGCCAGGGCACGGCCCGACCTAGAACTTTGGTGA")

